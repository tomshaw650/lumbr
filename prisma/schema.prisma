generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  role          Role      @default(USER)
  interests     UserTag[]
  accounts      Account[]
  sessions      Session[]
  logs          Log[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  followers     Follow[]  @relation("followed_user")
  following     Follow[]  @relation("following_user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Log {
  log_id      String    @id @default(cuid())
  user_id     String
  title       String
  description String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  posts       Post[]
  log_tags    LogTag[]
  comments    Comment[]
  likes       Like[]
  LogPost     LogPost[]

  @@index([user_id])
}

model Post {
  post_id    String    @id @default(cuid())
  user_id    String
  title      String
  content    String    @db.Text
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  logs       Log[]
  LogPost    LogPost[]
  Comment    Comment[]
  Like       Like[]

  @@index([user_id])
}

model LogPost {
  log_id  String
  post_id String
  log     Log    @relation(fields: [log_id], references: [log_id])
  post    Post   @relation(fields: [post_id], references: [post_id])

  @@id([log_id, post_id])
  @@index([log_id])
  @@index([post_id])
}

model Comment {
  comment_id String   @id @default(cuid())
  user_id    String
  log_id     String?
  post_id    String?
  body       String
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  log        Log?      @relation(fields: [log_id], references: [log_id], onDelete: Cascade)
  post       Post?     @relation(fields: [post_id], references: [post_id], onDelete: Cascade)

  @@index([user_id])
  @@index([log_id])
  @@index([post_id])
}

model Like {
  like_id    String   @id @default(cuid())
  user_id    String
  log_id     String
  post_id    String
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  log        Log      @relation(fields: [log_id], references: [log_id], onDelete: Cascade)
  post       Post     @relation(fields: [post_id], references: [post_id], onDelete: Cascade)

  @@index([user_id])
  @@index([log_id])
  @@index([post_id])
}

model Follow {
  followed_user_id  String
  following_user_id String
  created_at        DateTime @default(now())
  followed_user     User     @relation("followed_user", fields: [followed_user_id], references: [id], onDelete: Cascade)
  following_user    User     @relation("following_user", fields: [following_user_id], references: [id], onDelete: Cascade)

  // composite primary key
  @@id([followed_user_id, following_user_id])
  @@index([followed_user_id])
  @@index([following_user_id])
}

model Tag {
  tag_id    String    @id @default(cuid())
  tag_name  String
  user_tags UserTag[]
  log_tags  LogTag[]
}

model LogTag {
  tag_id String
  log_id String
  tag    Tag    @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade)
  log    Log    @relation(fields: [log_id], references: [log_id], onDelete: Cascade)

  // composite primary key
  @@id([log_id, tag_id])
  @@index([tag_id])
  @@index([log_id])
}

model UserTag {
  tag_id  String
  user_id String
  tag     Tag    @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade)
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // composite primary key
  @@id([user_id, tag_id])
  @@index([tag_id])
  @@index([user_id])
}
